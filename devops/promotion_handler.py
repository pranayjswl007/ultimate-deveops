import os
import json
import requests
import sys
import time

def fail(message, response=None):
    print(f"‚ùå {message}")
    if response is not None:
        print(response.text)
    sys.exit(1)

def get_headers(token):
    return {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github+json"
    }

def find_existing_promotion_pr(repo, head, base, gh_pat):
    """Check if a promotion PR already exists for this head->base combination"""
    url = f"https://api.github.com/repos/{repo}/pulls"
    params = {
        "head": f"{repo.split('/')[0]}:{head}",  # owner:branch_name
        "base": base,
        "state": "open"
    }
    
    response = requests.get(url, headers=get_headers(gh_pat), params=params)
    
    if response.status_code != 200:
        print(f"‚ö†Ô∏è Warning: Could not search for existing PRs: {response.status_code}")
        return None
    
    prs = response.json()
    if prs:
        existing_pr = prs[0]  # Get the first matching PR
        pr_number = existing_pr.get("number")
        print(f"‚ÑπÔ∏è Found existing promotion PR #{pr_number} for {head} ‚Üí {base}")
        return pr_number
    
    return None

def update_existing_promotion_pr(repo, pr_number, source_pr, gh_pat):
    """Update the existing promotion PR with reference to the new source PR"""
    
    # Get current PR details
    response = requests.get(
        f"https://api.github.com/repos/{repo}/pulls/{pr_number}",
        headers=get_headers(gh_pat)
    )
    
    if response.status_code != 200:
        print(f"‚ö†Ô∏è Warning: Could not fetch existing PR details: {response.status_code}")
        return
    
    current_pr = response.json()
    current_body = current_pr.get("body", "")
    
    # Add a note about the new source PR
    update_note = f"""

---

### üìù Update - {time.strftime('%Y-%m-%d %H:%M:%S')} UTC

This promotion PR has been linked to a new source PR: [#{source_pr}](https://github.com/{repo}/pull/{source_pr})

"""
    
    updated_body = current_body + update_note
    
    # Update the PR body
    update_payload = {
        "body": updated_body
    }
    
    response = requests.patch(
        f"https://api.github.com/repos/{repo}/pulls/{pr_number}",
        headers=get_headers(gh_pat),
        json=update_payload
    )
    
    if response.status_code == 200:
        print(f"‚úÖ Updated existing promotion PR #{pr_number} with new source PR reference")
    else:
        print(f"‚ö†Ô∏è Warning: Could not update existing PR body: {response.status_code}")

def create_promotion_pr(repo, head, base, source_pr, gh_pat, has_conflict):
    if head.count("promotion") > 1:
        fail("üö® Recursion detected in promotion branch name. Aborting.")

    # Check if a promotion PR already exists
    existing_pr_number = find_existing_promotion_pr(repo, head, base, gh_pat)
    
    if existing_pr_number:
        print(f"üìã Promotion PR already exists: #{existing_pr_number}")
        
        # Update the existing PR with reference to the new source PR
        update_existing_promotion_pr(repo, existing_pr_number, source_pr, gh_pat)
        
        # Output the existing PR number
        with open(os.environ["GITHUB_OUTPUT"], "a") as f:
            f.write(f"new_pr_number={existing_pr_number}\n")
        
        return existing_pr_number

    # If no existing PR, create a new one
    conflict_note = (
        "\n\n‚ö†Ô∏è **Warning:** This PR currently has merge conflicts and cannot be merged until resolved."
        if has_conflict else ""
    )

    body = f"""## üöÄ Auto Promotion PR

This pull request was created automatically to promote changes from [PR #{source_pr}](https://github.com/{repo}/pull/{source_pr}) into the `{base}` branch.

### üîÅ Promotion Details
- **Source Branch:** `{head}`
- **Target Branch:** `{base}`
- **Original PR:** #{source_pr}{conflict_note}

---

_This PR was generated by the **Auto Promotion Workflow**._
"""

    payload = {
        "title": f"üöÄ Promote `{head}` ‚Üí `{base}`",
        "head": head,
        "base": base,
        "body": body
    }

    url = f"https://api.github.com/repos/{repo}/pulls"
    response = requests.post(url, headers=get_headers(gh_pat), json=payload)

    if response.status_code == 422:
        # Handle the specific case where PR already exists (race condition)
        error_data = response.json()
        if "pull request already exists" in error_data.get("message", "").lower():
            print("üîÑ PR was created by another process, searching for it...")
            existing_pr_number = find_existing_promotion_pr(repo, head, base, gh_pat)
            if existing_pr_number:
                print(f"üìã Found the existing PR: #{existing_pr_number}")
                update_existing_promotion_pr(repo, existing_pr_number, source_pr, gh_pat)
                
                with open(os.environ["GITHUB_OUTPUT"], "a") as f:
                    f.write(f"new_pr_number={existing_pr_number}\n")
                
                return existing_pr_number
        
        fail("Failed to create promotion PR", response)

    if response.status_code != 201:
        fail("Failed to create promotion PR", response)

    pr_number = response.json().get("number")
    print(f"‚úÖ Created promotion PR #{pr_number}")

    with open(os.environ["GITHUB_OUTPUT"], "a") as f:
        f.write(f"new_pr_number={pr_number}\n")

    return pr_number

def check_conflicts(repo, pr_number, gh_pat):
    for attempt in range(5):
        response = requests.get(
            f"https://api.github.com/repos/{repo}/pulls/{pr_number}",
            headers=get_headers(gh_pat)
        )
        if response.status_code != 200:
            fail("Failed to fetch PR info for conflict check", response)

        pr_data = response.json()
        mergeable = pr_data.get("mergeable")

        if mergeable is not None:
            print(f"‚ÑπÔ∏è Mergeable status: {mergeable}")
            return mergeable is False

        print("‚è≥ Waiting for GitHub to compute mergeability...")
        time.sleep(2)

    print("‚ö†Ô∏è Could not determine merge conflict status.")
    return False

def comment_and_close_original_pr(repo, original_pr, promo_branch, promotion_pr_number, gh_pat, has_conflict, is_existing_pr=False):
    conflict_note = (
        "\n\n‚ö†Ô∏è **Note:** The promotion PR has merge conflicts and will require manual resolution before merging."
        if has_conflict else ""
    )
    
    pr_action = "linked to existing" if is_existing_pr else "opened"

    comment_body = f"""### üîÅ Promotion Workflow Notification

A promotion branch `{promo_branch}` has been created and [PR #{promotion_pr_number}](https://github.com/{repo}/pull/{promotion_pr_number}) has been {pr_action}.

This original PR is now closed as the promotion workflow has taken over.{conflict_note}

---

_Managed by Auto Promotion Bot_
"""

    response = requests.post(
        f"https://api.github.com/repos/{repo}/issues/{original_pr}/comments",
        headers=get_headers(gh_pat),
        json={"body": comment_body}
    )
    if response.status_code != 201:
        fail("Failed to comment on original PR", response)

    response = requests.patch(
        f"https://api.github.com/repos/{repo}/pulls/{original_pr}",
        headers=get_headers(gh_pat),
        json={"state": "closed"}
    )
    if response.status_code != 200:
        fail("Failed to close original PR", response)

    print(f"‚úÖ Original PR #{original_pr} commented and closed.")

if __name__ == "__main__":
    try:
        repo = os.environ["REPO"]
        promo_branch = os.environ["PROMO_BRANCH"]
        base_branch = os.environ["BASE_BRANCH"]
        original_pr = os.environ["SOURCE_PR"]
        gh_pat = os.environ["GH_PAT"]

        # Check if promotion PR already exists before creating
        existing_pr_number = find_existing_promotion_pr(repo, promo_branch, base_branch, gh_pat)
        is_existing_pr = existing_pr_number is not None

        promotion_pr_number = create_promotion_pr(repo, promo_branch, base_branch, original_pr, gh_pat, has_conflict=False)
        has_conflict = check_conflicts(repo, promotion_pr_number, gh_pat)
        comment_and_close_original_pr(repo, original_pr, promo_branch, promotion_pr_number, gh_pat, has_conflict, is_existing_pr)

    except KeyError as e:
        fail(f"Missing environment variable: {e}")
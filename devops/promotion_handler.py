import os
import json
import requests
import sys
import time

def fail(message, response=None):
    print(f"‚ùå {message}")
    if response is not None:
        print(response.text)
    sys.exit(1)

def get_headers(token):
    return {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github+json"
    }

def find_existing_promotion_pr(repo, head, base, gh_pat):
    """Check if a promotion PR already exists for this head->base combination"""
    url = f"https://api.github.com/repos/{repo}/pulls"
    params = {
        "head": f"{repo.split('/')[0]}:{head}",  # owner:branch_name
        "base": base,
        "state": "open"
    }
    
    response = requests.get(url, headers=get_headers(gh_pat), params=params)
    
    if response.status_code != 200:
        print(f"‚ö†Ô∏è Warning: Could not search for existing PRs: {response.status_code}")
        return None
    
    prs = response.json()
    if prs:
        existing_pr = prs[0]  # Get the first matching PR
        pr_number = existing_pr.get("number")
        print(f"‚ÑπÔ∏è Found existing promotion PR #{pr_number} for {head} ‚Üí {base}")
        return pr_number
    
    return None

def close_pr(repo, pr_number, gh_pat, reason="Closed by Auto Promotion Bot"):
    """Close a PR with a comment"""
    
    # Add a comment explaining why it's being closed
    comment_body = f"""### üîÑ Auto Promotion Bot

{reason}

---

_Managed by Auto Promotion Bot_
"""

    # Add comment
    response = requests.post(
        f"https://api.github.com/repos/{repo}/issues/{pr_number}/comments",
        headers=get_headers(gh_pat),
        json={"body": comment_body}
    )
    if response.status_code != 201:
        print(f"‚ö†Ô∏è Warning: Could not comment on PR #{pr_number}")
    
    # Close the PR
    response = requests.patch(
        f"https://api.github.com/repos/{repo}/pulls/{pr_number}",
        headers=get_headers(gh_pat),
        json={"state": "closed"}
    )
    
    if response.status_code == 200:
        print(f"‚úÖ Closed PR #{pr_number}")
    else:
        print(f"‚ö†Ô∏è Warning: Could not close PR #{pr_number}: {response.status_code}")

def delete_branch(repo, branch_name, gh_pat):
    """Delete a branch from the repository"""
    response = requests.delete(
        f"https://api.github.com/repos/{repo}/git/refs/heads/{branch_name}",
        headers=get_headers(gh_pat)
    )
    
    if response.status_code == 204:
        print(f"‚úÖ Deleted branch: {branch_name}")
    elif response.status_code == 422:
        print(f"‚ÑπÔ∏è Branch {branch_name} does not exist or already deleted")
    else:
        print(f"‚ö†Ô∏è Warning: Could not delete branch {branch_name}: {response.status_code}")

def create_promotion_branch(repo, source_branch, promo_branch, gh_pat):
    """Create or recreate the promotion branch from the source branch"""
    
    # First, get the latest commit SHA from the source branch
    response = requests.get(
        f"https://api.github.com/repos/{repo}/git/refs/heads/{source_branch}",
        headers=get_headers(gh_pat)
    )
    
    if response.status_code != 200:
        fail(f"Failed to get source branch {source_branch}", response)
    
    source_sha = response.json()["object"]["sha"]
    print(f"‚ÑπÔ∏è Source branch {source_branch} SHA: {source_sha}")
    
    # Try to update existing branch first (in case it exists)
    update_response = requests.patch(
        f"https://api.github.com/repos/{repo}/git/refs/heads/{promo_branch}",
        headers=get_headers(gh_pat),
        json={"sha": source_sha}
    )
    
    if update_response.status_code == 200:
        print(f"‚úÖ Updated existing promotion branch: {promo_branch}")
        return
    
    # If update failed, create new branch
    create_response = requests.post(
        f"https://api.github.com/repos/{repo}/git/refs",
        headers=get_headers(gh_pat),
        json={
            "ref": f"refs/heads/{promo_branch}",
            "sha": source_sha
        }
    )
    
    if create_response.status_code == 201:
        print(f"‚úÖ Created promotion branch: {promo_branch}")
    else:
        fail(f"Failed to create promotion branch {promo_branch}", create_response)

def create_new_promotion_pr(repo, head, base, source_pr, gh_pat):
    """Create a new promotion PR"""
    
    body = f"""## üöÄ Auto Promotion PR

This pull request was created automatically to promote changes from [PR #{source_pr}](https://github.com/{repo}/pull/{source_pr}) into the `{base}` branch.

### üîÅ Promotion Details
- **Source Branch:** `{head}`
- **Target Branch:** `{base}`
- **Original PR:** #{source_pr}

---

_This PR was generated by the **Auto Promotion Workflow**._
"""

    payload = {
        "title": f"üöÄ Promote `{head}` ‚Üí `{base}`",
        "head": head,
        "base": base,
        "body": body
    }

    url = f"https://api.github.com/repos/{repo}/pulls"
    response = requests.post(url, headers=get_headers(gh_pat), json=payload)

    if response.status_code != 201:
        fail("Failed to create promotion PR", response)

    pr_number = response.json().get("number")
    print(f"‚úÖ Created new promotion PR #{pr_number}")

    with open(os.environ["GITHUB_OUTPUT"], "a") as f:
        f.write(f"new_pr_number={pr_number}\n")

    return pr_number

def main_promotion_flow(repo, promo_branch, base_branch, original_pr, source_branch, gh_pat):
    """Main promotion flow: Close original PR, close existing promotion PR, create new PR"""
    
    print(f"üöÄ Starting promotion flow for PR #{original_pr}")
    
    # Step 1: Close original PR
    print("\nüìã Step 1: Closing original PR")
    close_pr(repo, original_pr, gh_pat, 
             f"This PR has been promoted to [{promo_branch}](https://github.com/{repo}/tree/{promo_branch}). A new promotion PR will be created.")
    
    # Step 2: Check and close existing promotion PR if it exists
    print("\nüìã Step 2: Checking for existing promotion PR")
    existing_pr_number = find_existing_promotion_pr(repo, promo_branch, base_branch, gh_pat)
    
    if existing_pr_number:
        print(f"Found existing promotion PR #{existing_pr_number} - closing it")
        close_pr(repo, existing_pr_number, gh_pat, 
                 f"Closing to recreate with latest changes from PR #{original_pr}")
        
        # Delete the old promotion branch to ensure clean state
        delete_branch(repo, promo_branch, gh_pat)
    else:
        print("No existing promotion PR found")
    
    # Step 3: Create/recreate the promotion branch from source
    print("\nüìã Step 3: Creating promotion branch")
    create_promotion_branch(repo, source_branch, promo_branch, gh_pat)
    
    # Step 4: Create new promotion PR
    print("\nüìã Step 4: Creating new promotion PR")
    promotion_pr_number = create_new_promotion_pr(repo, promo_branch, base_branch, original_pr, gh_pat)
    
    print(f"\nüéâ Promotion completed successfully!")
    print(f"   Original PR #{original_pr}: ‚úÖ Closed")
    if existing_pr_number:
        print(f"   Old promotion PR #{existing_pr_number}: ‚úÖ Closed")
    print(f"   New promotion PR #{promotion_pr_number}: ‚úÖ Created")
    
    return promotion_pr_number

if __name__ == "__main__":
    try:
        repo = os.environ["REPO"]
        promo_branch = os.environ["PROMO_BRANCH"]
        base_branch = os.environ["BASE_BRANCH"]
        original_pr = os.environ["SOURCE_PR"]
        source_branch = os.environ.get("FEATURE_BRANCH")
        gh_pat = os.environ["GH_PAT"]

        # If FEATURE_BRANCH is not provided, try to extract from PROMO_BRANCH
        if not source_branch:
            # Extract source branch from promotion branch name
            # e.g., "promotions/feature1Replacement-to-develop" ‚Üí "feature1Replacement"
            if promo_branch.startswith("promotions/") and "-to-" in promo_branch:
                source_branch = promo_branch.split("promotions/")[1].split("-to-")[0]
                print(f"‚ÑπÔ∏è Extracted source branch from promotion branch: {source_branch}")
            else:
                fail("Could not determine source branch. Please provide FEATURE_BRANCH environment variable.")

        # Run the main promotion flow
        main_promotion_flow(repo, promo_branch, base_branch, original_pr, source_branch, gh_pat)

    except KeyError as e:
        fail(f"Missing environment variable: {e}")
import os
import json
import requests
import sys
import time

def fail(message, response=None):
    print(f"‚ùå {message}")
    if response is not None:
        print(response.text)
    sys.exit(1)

def get_headers(token):
    return {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github+json"
    }

def create_promotion_pr(repo, head, base, source_pr, gh_pat):
    body = f"""### üöÄ Promotion PR Created Automatically

This PR was created to promote changes from **#{source_pr}** into **{base}**.

- üîÅ **Original PR**: #{source_pr}
- üåø **Source Branch**: `{head}`
- üéØ **Target Branch**: `{base}`

---

_This PR was generated by the **Auto Promotion Workflow**._"""

    payload = {
        "title": f"üöÄ Promotion: {head} ‚Üí {base}",
        "head": head,
        "base": base,
        "body": body
    }

    url = f"https://api.github.com/repos/{repo}/pulls"
    response = requests.post(url, headers=get_headers(gh_pat), json=payload)

    if response.status_code != 201:
        fail("Failed to create promotion PR", response)

    pr_number = response.json().get("number")
    print(f"‚úÖ Created promotion PR #{pr_number}")

    # Output to GitHub Actions
    with open(os.environ["GITHUB_OUTPUT"], "a") as f:
        f.write(f"new_pr_number={pr_number}\n")

    return pr_number

def check_conflicts(repo, pr_number, gh_pat):
    # GitHub might need a moment to compute mergeability
    for attempt in range(5):
        response = requests.get(
            f"https://api.github.com/repos/{repo}/pulls/{pr_number}",
            headers=get_headers(gh_pat)
        )
        if response.status_code != 200:
            fail("Failed to fetch PR info for conflict check", response)

        pr_data = response.json()
        mergeable = pr_data.get("mergeable")

        if mergeable is not None:
            print(f"‚ÑπÔ∏è Mergeable status: {mergeable}")
            return mergeable is False

        print("‚è≥ Waiting for GitHub to compute mergeability...")
        time.sleep(2)

    print("‚ö†Ô∏è Could not determine merge conflict status.")
    return False

def comment_and_close_original_pr(repo, original_pr, promo_branch, new_pr_number, gh_pat, has_conflict):
    conflict_note = (
        "\n\n‚ö†Ô∏è **Note:** This promotion PR has merge conflicts. Please resolve them before merging."
        if has_conflict else ""
    )

    comment_body = f"""üîÅ **Promotion PR Created**

A new promotion branch `{promo_branch}` has been created, and [PR #{new_pr_number}](https://github.com/{repo}/pull/{new_pr_number}) was opened to promote the changes.

This PR is now closed as the promotion workflow has taken over.{conflict_note}
"""

    response = requests.post(
        f"https://api.github.com/repos/{repo}/issues/{original_pr}/comments",
        headers=get_headers(gh_pat),
        json={"body": comment_body}
    )
    if response.status_code != 201:
        fail("Failed to comment on original PR", response)

    response = requests.patch(
        f"https://api.github.com/repos/{repo}/pulls/{original_pr}",
        headers=get_headers(gh_pat),
        json={"state": "closed"}
    )
    if response.status_code != 200:
        fail("Failed to close original PR", response)

    print(f"‚úÖ Original PR #{original_pr} commented and closed.")

if __name__ == "__main__":
    try:
        repo = os.environ["REPO"]
        promo_branch = os.environ["PROMO_BRANCH"]
        base_branch = os.environ["BASE_BRANCH"]
        original_pr = os.environ["SOURCE_PR"]
        gh_pat = os.environ["GH_PAT"]

        new_pr = create_promotion_pr(repo, promo_branch, base_branch, original_pr, gh_pat)
        has_conflict = check_conflicts(repo, new_pr, gh_pat)
        comment_and_close_original_pr(repo, original_pr, promo_branch, new_pr, gh_pat, has_conflict)

    except KeyError as e:
        fail(f"Missing environment variable: {e}")

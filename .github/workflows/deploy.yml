name: Deploy to environment

on:
  workflow_call:
    inputs:
      environment-name:
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment-name }}

    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: "22"

      # Set custom prefix to cache global npm packages like Salesforce CLI
      - name: Set custom npm prefix
        run: npm config set prefix ~/.npm-global

      - name: Cache Global npm packages (Salesforce CLI etc.)
        uses: actions/cache@v3
        with:
          path: ~/.npm-global
          key: ${{ runner.os }}-npm-global-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-global-

      - name: Add custom prefix to PATH
        run: echo "$HOME/.npm-global/bin" >> $GITHUB_PATH

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('devops/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: "Checkout source code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Environment Variables
        run: |
          echo "environment-name=${{ inputs.environment-name }}" 
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "GITHUB_REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
          echo "TOKEN_GITHUB=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "COMMIT_ID=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV

      - name: "Checkout devops folder from the called repository"
        run: |
          git clone --depth 1 --branch main https://github.com/pranayjswl007/ultimate-devops.git
          cp -r ultimate-devops/devops/ ./devops

      - name: "Install Salesforce CLI"
        run: npm install @salesforce/cli --global

      - name: "Authenticate using SFDX_AUTH_URL"
        run: |
          echo ${{ secrets.SF_AUTH_URL }} | sf org login sfdx-url --sfdx-url-stdin -d -s

      - name: "PR Post Processing test"
        id: pr-post-processing
        run: |
          python3 devops/prDeployPreProcessor.py
          echo "Looking for GitHub Actions comments with deployment info..."

      - name: "Run quick deploy"
        id: quick-deploy
        if: ${{ env.BYPASS_DEPLOYMENT != 'true' }}
        run: |
          echo "DEPLOYMENT_ID=${DEPLOYMENT_ID}"

          sf project deploy quick --job-id ${DEPLOYMENT_ID} \
            --wait 60 \
            --verbose \
            --json > deploymentResult.json || true

      - name: "Check if quick deploy was successful"
        id: check-quick-deploy
        if: ${{ env.BYPASS_DEPLOYMENT != 'true' }}
        run: |
          python3 devops/quickDeploymentResultChecker.py

      - name: Download artifact
        if: ${{ env.QUICK_DEPLOY_STATUS == 'false' && env.BYPASS_DEPLOYMENT != 'true' }}
        uses: actions/download-artifact@v4
        with:
          artifact-ids: ${{ env.ARTIFACT_ID }}
          run-id: ${{ env.RUN_ID }}
          repository: ${{ env.GITHUB_REPOSITORY }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Unzip delta package"
        if: ${{ env.QUICK_DEPLOY_STATUS == 'false' && env.BYPASS_DEPLOYMENT != 'true' }}
        run: |
          unzip -o delta-package/delta-package.zip
          ls -R changed-sources/

      - name: "Deploy delta package - run all tests"
        if: ${{ env.QUICK_DEPLOY_STATUS == 'false' && env.BYPASS_DEPLOYMENT != 'true' }}
        run: |
          sf project deploy start \
            --manifest "changed-sources/package/package.xml" \
            --test-level RunLocalTests \
            --pre-destructive-changes "changed-sources/destructiveChanges/package.xml" \
            --ignore-warnings \
            --ignore-conflicts \
            --wait 60 \
            --verbose

      - name: "Execute newly added Apex scripts after merge"
        run: |
          BASE=$(git rev-parse HEAD^1)
          HEAD=$(git rev-parse HEAD)

          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            folder="scripts/apex/production"
          else
            folder="scripts/apex/sandbox"
          fi

          new_files=$(git diff --diff-filter=A --name-only "$BASE" "$HEAD" | grep "^$folder" || true)

          if [[ -z "$new_files" ]]; then
            echo "âœ… No new Apex scripts found in $folder"
          else
            for file in $new_files; do
              echo "ðŸš€ Executing $file"
              sf apex run --file "$file"
            done
          fi

      - name: Get formatted date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: "Create GitHub Release"
        if: github.ref == 'refs/heads/main'
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: release-${{ steps.date.outputs.date }}-${{ github.run_number }}
          release_name: Release on ${{ steps.date.outputs.date }} (#${{ github.run_number }})
          body: |
            ðŸš€ Deployment to `main` completed successfully.
            Includes changes from commit ${{ github.sha }}.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

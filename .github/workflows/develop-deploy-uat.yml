name: Push Deployment to develop

on:
  workflow_call:
    inputs:
      config-path:
        required: true
        type: string
      environment-name: # <--- define a new input
        required: true
        type: string

jobs:
  deploy-to-uat:
    runs-on: ubuntu-latest
    name: ${{ inputs.environment-name }}

    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: "Checkout source code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Checkout devops folder from the called repository"
        run: |
          git clone --depth 1 --branch main https://github.com/pranayjswl007/ultimate-devops.git
          cp -r ultimate-devops/devops/ ./devops  # Copy just the devops folder from the called repo

      - name: Set Environment Variables
        run: |
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "GITHUB_REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
          echo "TOKEN_GITHUB=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "COMMIT_ID=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV

      - name: "Install Salesforce CLI"
        run: npm install --global @salesforce/cli

      - name: "Installing sfdx git delta"
        run: |
          echo y | sf plugins install sfdx-git-delta

      - name: Authenticate to Salesforce
        run: |
          echo "${{ secrets.SF_AUTH_URL }}" | sf org login sfdx-url --sfdx-url-stdin -d -s

      - name: "PR Post Processing test"
        id: pr-post-processing
        run: |
          python3 devops/prDeployPreProcessor.py

      - name: "PR Post Processing Echo Deployment Id"
        run: |
          echo "DEPLOYMENT_ID=${{ steps.pr-post-processing.outputs.DEPLOYMENT_ID }}" >> $GITHUB_ENV
          echo $DEPLOYMENT_ID
          echo "ARTIFACT_URL=${{ steps.pr-post-processing.outputs.ARTIFACT_URL }}" >> $GITHUB_ENV
          echo $ARTIFACT_URL
          echo "ARTIFACT_ID=${{ steps.pr-post-processing.outputs.ARTIFACT_ID }}" >> $GITHUB_ENV
          echo $ARTIFACT_ID

      - name: "Run quick deploy"
        if: ${{ steps.pr-post-processing.outputs.DEPLOYMENT_ID != 'null' }}
        run: |
          sf project deploy quick --job-id "$DEPLOYMENT_ID" \
            --wait 60 \
            --verbose \
            --ignore-warnings \
            --ignore-conflicts \
            --json > deploymentResult.json || true

      - name: "Check if quick deploy was successful"
        id: check-quick-deploy
        run: |
          python3 devops/quickDeploymentResultCheck.py

      - name: Deploy delta package - run all tests
        id: artifact-upload-step
        if: ${{ steps.check-quick-deploy.outputs.QUICK_DEPLOY_STATUS == 'false' }}
        uses: actions/download-artifact@v4
        with:
          artifact-ids: $ARTIFACT_ID
          path: delta-package.zip

      - name: "Unzip delta package"
        if: ${{ steps.check-quick-deploy.outputs.QUICK_DEPLOY_STATUS == 'false' }}
        run: |
          unzip -o delta-package.zip
          ls -R changed-sources/
          echo "Unzipped delta package contents:"
          ls -R changed-sources/

      - name: "Deploy delta package - run all tests"
        if: ${{ steps.check-quick-deploy.outputs.QUICK_DEPLOY_STATUS == 'false' }}
        run: |
          sf project deploy start \
            --manifest "changed-sources/package/package.xml" \
            --test-level RunLocalTests \
            --pre-destructive-changes "changed-sources/destructiveChanges/package.xml" \
            --ignore-warnings \
            --wait 60 \
            --verbose
